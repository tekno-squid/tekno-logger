name: Deploy Production Database

# Manual trigger only - no automatic deployments
on:
  workflow_dispatch:
    inputs:
      force_migration:
        description: 'Force migration even if database appears populated'
        required: false
        type: boolean
        default: false

jobs:
  deploy-database:
    name: Deploy Database Schema (Production)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Verify TypeScript migration script exists
        run: |
          if [ -f "scripts/migrate.ts" ]; then
            echo "✅ TypeScript migration script found"
            echo "✅ Will use ts-node to run with path alias support"
          else
            echo "❌ Migration script not found"
            ls -la scripts/
            exit 1
          fi
      
      - name: Setup production environment variables
        run: |
          echo "Setting up production environment"
          
          # Production database variables  
          echo "DB_HOST=${{ secrets.PROD_DB_HOST }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.PROD_DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASS=${{ secrets.PROD_DB_PASSWORD }}" >> $GITHUB_ENV
          
          # Required environment variables for migration (dummy values, not used for DB operations)
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "PORT=3000" >> $GITHUB_ENV
          echo "HMAC_SECRET=dummy-secret-for-migration-32chars-minimum-length" >> $GITHUB_ENV
          echo "ADMIN_TOKEN=dummy-token-for-migration-32chars-minimum-length" >> $GITHUB_ENV
          echo "DEFAULT_RETENTION_DAYS=3" >> $GITHUB_ENV
          echo "MAX_PAYLOAD_BYTES=524288" >> $GITHUB_ENV
          echo "MAX_EVENTS_PER_POST=250" >> $GITHUB_ENV

      - name: Test database connection
        run: |
          echo "Testing database connection..."
          node -e "
            const mysql = require('mysql2/promise');
            (async () => {
              try {
                const connection = await mysql.createConnection({
                  host: process.env.DB_HOST,
                  user: process.env.DB_USER,
                  password: process.env.DB_PASS,
                  database: process.env.DB_NAME
                });
                console.log('✅ Database connection successful');
                await connection.end();
              } catch (error) {
                console.error('❌ Database connection failed:', error.message);
                process.exit(1);
              }
            })();
          "

      - name: Check existing database state
        run: |
          echo "Checking if database has existing tables..."
          node -e "
            const mysql = require('mysql2/promise');
            (async () => {
              try {
                const connection = await mysql.createConnection({
                  host: process.env.DB_HOST,
                  user: process.env.DB_USER,
                  password: process.env.DB_PASS,
                  database: process.env.DB_NAME
                });
                
                const [tables] = await connection.execute('SHOW TABLES');
                console.log('📊 Current database state:');
                if (tables.length > 0) {
                  console.log('📋 Existing tables found:');
                  tables.forEach(table => console.log('  -', Object.values(table)[0]));
                  
                  if ('${{ github.event.inputs.force_migration }}' === 'true') {
                    console.log('🔧 Force migration enabled - will proceed with migration');
                  } else {
                    console.log('⚠️ Database not empty, but proceeding with migration (migrations are idempotent)');
                  }
                } else {
                  console.log('✅ Database is empty, ready for migration');
                }
                
                await connection.end();
              } catch (error) {
                console.error('❌ Failed to check database state:', error.message);
                process.exit(1);
              }
            })();
          "

      - name: Run database migration
        run: |
          echo "🚀 Executing database migration..."
          echo "Database: ${{ env.DB_HOST }}/${{ env.DB_NAME }}"
          echo "User: ${{ env.DB_USER }}"
          echo ""
          
          # Check if migration files exist
          echo "📁 Checking migration files..."
          ls -la migrations/
          echo ""
          
          # Check current schema_migrations table
          echo "📋 Checking existing migrations in database..."
          node -e "
            const mysql = require('mysql2/promise');
            (async () => {
              try {
                const connection = await mysql.createConnection({
                  host: process.env.DB_HOST,
                  user: process.env.DB_USER,
                  password: process.env.DB_PASS,
                  database: process.env.DB_NAME
                });
                
                console.log('Checking if schema_migrations table exists...');
                try {
                  const [migrations] = await connection.execute('SELECT version, filename FROM schema_migrations ORDER BY version');
                  console.log('🔍 Migrations already executed:');
                  migrations.forEach(row => console.log('  ✓', row.version, '-', row.filename));
                  
                  if (migrations.length === 0) {
                    console.log('📝 No migrations executed yet - this is expected for first run');
                  }
                } catch (error) {
                  console.log('📝 schema_migrations table does not exist yet - will be created');
                }
                
                await connection.end();
              } catch (error) {
                console.error('❌ Failed to check migrations:', error.message);
              }
            })();
          "
          echo ""
          
          # Clear any existing schema_migrations to force fresh migration
          echo "🧹 Clearing migration tracking table to force fresh migration..."
          node -e "
            const mysql = require('mysql2/promise');
            (async () => {
              try {
                const connection = await mysql.createConnection({
                  host: process.env.DB_HOST,
                  user: process.env.DB_USER,
                  password: process.env.DB_PASS,
                  database: process.env.DB_NAME
                });
                
                console.log('Clearing schema_migrations table...');
                try {
                  await connection.execute('DELETE FROM schema_migrations');
                  console.log('✅ Migration tracking cleared');
                } catch (error) {
                  console.log('📝 No schema_migrations table to clear (this is fine)');
                }
                
                await connection.end();
              } catch (error) {
                console.error('❌ Failed to clear migrations:', error.message);
              }
            })();
          "
          echo ""
          
          # Run the migration using ts-node to handle path aliases
          npx ts-node --require tsconfig-paths/register scripts/migrate.ts

      - name: Verify migration success
        run: |
          echo "✅ Verifying migration was successful..."
          node -e "
            const mysql = require('mysql2/promise');
            (async () => {
              try {
                const connection = await mysql.createConnection({
                  host: process.env.DB_HOST,
                  user: process.env.DB_USER,
                  password: process.env.DB_PASS,
                  database: process.env.DB_NAME
                });
                
                const [tables] = await connection.execute('SHOW TABLES');
                const expectedTables = ['projects', 'logs', 'project_minute_counters', 'alert_settings', 'fingerprint_trackers', 'maintenance_state'];
                
                console.log('📊 Database tables created:');
                tables.forEach(table => console.log('  ✓', Object.values(table)[0]));
                
                const missingTables = expectedTables.filter(table => 
                  !tables.some(row => Object.values(row)[0] === table)
                );
                
                if (missingTables.length > 0) {
                  console.log('❌ Missing expected tables:', missingTables);
                  process.exit(1);
                }
                
                console.log('✅ All expected tables created successfully');
                await connection.end();
              } catch (error) {
                console.error('❌ Migration verification failed:', error.message);
                process.exit(1);
              }
            })();
          "

      - name: Generate summary
        if: always()
        run: |
          echo "## Database Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Database**: ${{ env.DB_HOST }}/${{ env.DB_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Force Migration**: ${{ github.event.inputs.force_migration }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "Your Render service should now start successfully!" >> $GITHUB_STEP_SUMMARY